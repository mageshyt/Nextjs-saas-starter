// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum InvoiceStatus {
  PAID
  UNPAID
  VOID
  PENDING
}

enum Interval {
  MONTHLY
  YEARLY
}

model User {
  id                String   @id @default(uuid())
  created_time      DateTime @default(now())
  updated_time      DateTime @updatedAt
  email             String   @unique
  role              Role     @default(USER)
  first_name        String?
  last_name         String?
  profile_image_url String?
  user_id           String   @unique
  subscription      String?

  // Relations
  payments      Payment[]
  subscriptions Subscription[]
  invoices      Invoice[]
}

model Payment {
  id               String   @id @default(uuid())
  created_time     DateTime @default(now())
  stripe_id        String
  email            String
  amount           Decimal
  payment_time     DateTime
  currency         String
  user_id          String
  customer_details String
  payment_intent   String

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Subscription {
  id                        String            @id @default(uuid())
  created_time              DateTime          @default(now())
  updated_time              DateTime          @updatedAt
  subscription_id           String            @unique
  stripe_user_id            String
  status                    String
  start_date                DateTime
  end_date                  DateTime?
  default_payment_method_id String?
  email                     String
  user_id                   String
  plan_id                   String
  // Relations
  user                      User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  plan                      SubscriptionPlan? @relation(fields: [plan_id], references: [id])
  invoices                  Invoice[]

  @@index([user_id])
  @@index([plan_id])
}

model SubscriptionPlan {
  id          String   @id @default(uuid())
  name        String
  description String?
  amount      Decimal
  currency    String
  interval    Interval

  plan_id     String? @unique

  // Relations
  subscriptions Subscription[]

  created_time DateTime @default(now())
  updated_time DateTime @updatedAt @default(now())
}

model Invoice {
  id              String        @id @default(uuid())
  created_time    DateTime      @default(now())
  invoice_id      String        @unique
  subscription_id String
  amount_paid     Decimal
  amount_due      Decimal?
  currency        String
  status          InvoiceStatus @default(PENDING)
  email           String
  user_id         String?

  // Relations
  subscription Subscription @relation(fields: [subscription_id], references: [id], onDelete: Cascade)
  user         User?        @relation(fields: [user_id], references: [id], onDelete: SetNull)

  @@unique([invoice_id, subscription_id])
  @@index([subscription_id])
  @@index([user_id])
}
