generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum InvoiceStatus {
  PAID
  UNPAID
  VOID
  PENDING
}

enum Interval {
  MONTHLY
  YEARLY
}

enum SubscriptionType {
  FREE
  BASIC
  PRO
}

model User {
  id                String           @id @default(uuid())
  email             String           @unique
  role              Role             @default(USER)
  name              String?
  profile_image_url String?
  user_id           String           @unique
  subscriptionPlan     SubscriptionType @default(FREE)
  stripeCustomerId  String?          @unique

  // Relations
  payments      Payment[]
  subscription Subscription?
  invoices      Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentStatus {
  SUCCEEDED
  FAILED
  PENDING
}

model Payment {
  id               String        @id @default(uuid())
  stripe_id        String
  email            String
  amount           Decimal
  payment_time     DateTime
  currency         String
  user_id          String
  invoice_id       String @unique
  customer_details String
  payment_intent   String
  status           PaymentStatus @default(PENDING)

  // Relations
  user         User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  invoice      Invoice      @relation(fields: [invoice_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([stripe_id, invoice_id])
  @@index([user_id])
  @@index([invoice_id])
}

model Subscription {
  id                        String            @id @default(uuid())
  subscription_id           String            @unique
  stripe_user_id            String
  status                    String
  start_date                DateTime
  end_date                  DateTime?
  default_payment_method_id String?
  email                     String
  user_id                   String            @unique
  plan_id                   String
  // Relations
  user                      User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  plan                      SubscriptionPlan? @relation(fields: [plan_id], references: [id])
  invoices                  Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([user_id])
  @@index([plan_id])
}

model SubscriptionPlan {
  id          String   @id @default(uuid())
  name        String
  description String?
  amount      Decimal
  currency    String
  interval    Interval

  plan_id String? @unique

  // Relations
  subscriptions Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id              String        @id @default(uuid())
  invoice_id      String        @unique
  subscription_id String
  amount_paid     Decimal
  amount_due      Decimal?
  currency        String
  status          InvoiceStatus @default(PENDING)
  email           String
  user_id         String?



  // Relations
  subscription Subscription @relation(fields: [subscription_id], references: [id], onDelete: Cascade)
  user         User?        @relation(fields: [user_id], references: [id], onDelete: SetNull)
  payment      Payment?      

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([invoice_id, subscription_id])
  @@index([subscription_id])
  @@index([user_id])
}
